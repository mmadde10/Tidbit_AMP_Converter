{"version":3,"sources":["../src/ampBody.js"],"names":["handleAMPTags","handleScripting","cheerio","bodyRules","require","scriptRules","appendRequiredScripts","$","ruleAttrName","content","Attributes","newAMPTag","index","find","tag_name","each","attrString","attrs","html","attr","j","includes","amp_name","replaceWith","name","required_script","console","log","script","dissallowed_type","remove"],"mappings":"AAAA;;;;;QAMgBA,a,GAAAA,a;QA2BAC,e,GAAAA,e;;AAhChB;;IAAYC,O;;;;AACZ,IAAMC,YAAYC,QAAQ,sBAAR,EAAgCD,SAAlD;AACA,IAAME,cAAcD,QAAQ,wBAAR,CAApB;AACA,IAAME,wBAAwBF,QAAQ,WAAR,EAAqBE,qBAAnD;;AAEO,SAASN,aAAT,CAAuBO,CAAvB,EAAyB;AAC5B,QAAIC,qBAAJ;AACA,QAAIC,gBAAJ;AACA,QAAIC,mBAAJ;AACA,QAAIC,kBAAJ;;AAEA,SAAK,IAAIC,KAAT,IAAkBT,SAAlB,EAA6B;AACzBI,UAAE,MAAF,EAAUM,IAAV,CAAeV,UAAUS,KAAV,EAAiBE,QAAhC,EAA0CC,IAA1C,CAA+C,YAAU;AACrD,gBAAIC,aAAa,EAAjB;AACAR,2BAAeL,UAAUS,KAAV,EAAiBK,KAAhC;AACAR,sBAAUF,EAAE,IAAF,EAAQW,IAAR,EAAV;AACAR,yBAAaH,EAAE,IAAF,EAAQY,IAAR,EAAb;AACA,iBAAI,IAAIC,CAAR,IAAaV,UAAb,EAAwB;AACpB,oBAAGF,aAAaa,QAAb,CAAsBD,CAAtB,CAAH,EAA4B;AACxBJ,kCAAiBI,CAAjB,SAAsBV,WAAWU,CAAX,CAAtB;AACH;AACJ;AACDT,8BAAgBR,UAAUS,KAAV,EAAiBU,QAAjC,SAA6CN,UAA7C,SAA2DP,OAA3D,UAAuEN,UAAUS,KAAV,EAAiBU,QAAxF;AACAf,cAAE,IAAF,EAAQgB,WAAR,CAAoBZ,SAApB;AACA,gBAAGJ,EAAE,IAAF,EAAQ,CAAR,EAAWiB,IAAX,KAAoBrB,UAAUS,KAAV,EAAiBE,QAArC,IAAiDX,UAAUS,KAAV,EAAiBa,eAArE,EAAqF;AACjF;AACAC,wBAAQC,GAAR,CAAY,IAAZ,EAAiBxB,UAAUS,KAAV,EAAiBa,eAAlC;AACAnB,sCAAsBC,CAAtB,EAAwBJ,UAAUS,KAAV,EAAiBa,eAAzC;AACH;AACJ,SAjBD;AAkBH;AACJ;AACM,SAASxB,eAAT,CAAyBM,CAAzB,EAA2B;AAC9B,SAAK,IAAIK,KAAT,IAAkBP,YAAYuB,MAAZ,CAAmBC,gBAArC,EAAuD;AACnDtB,4BAAkBF,YAAYuB,MAAZ,CAAmBC,gBAAnB,CAAoCjB,KAApC,CAAlB,SAAkEG,IAAlE,CAAuE,YAAU;AAC7ER,cAAE,IAAF,EAAQuB,MAAR;AACH,SAFD;AAGH;AACJ","file":"ampBody.js","sourcesContent":["'use strict';\nimport * as cheerio from 'cheerio';\nconst bodyRules = require('./ampRules/bodyRules').bodyRules;\nconst scriptRules = require('./ampRules/scriptRules');\nconst appendRequiredScripts = require('./ampHead').appendRequiredScripts;\n\nexport function handleAMPTags($){\n    let ruleAttrName;\n    let content;\n    let Attributes;\n    let newAMPTag;\n\n    for (var index in bodyRules) {\n        $('body').find(bodyRules[index].tag_name).each(function(){\n            let attrString = '';\n            ruleAttrName = bodyRules[index].attrs;\n            content = $(this).html();\n            Attributes = $(this).attr();\n            for(var j in Attributes){\n                if(ruleAttrName.includes(j)){\n                    attrString += `${j}=${Attributes[j]} `;\n                }  \n            }\n            newAMPTag = `<${bodyRules[index].amp_name} ${attrString}>${content}</${bodyRules[index].amp_name}>`;\n            $(this).replaceWith(newAMPTag);\n            if($(this)[0].name === bodyRules[index].tag_name && bodyRules[index].required_script){\n                //append required_script to head\n                console.log('tt',bodyRules[index].required_script);\n                appendRequiredScripts($,bodyRules[index].required_script);\n            }\n        });\n    }\n}\nexport function handleScripting($){\n    for (var index in scriptRules.script.dissallowed_type) {\n        $(`script[type=\"${scriptRules.script.dissallowed_type[index]}\"]`).each(function(){\n            $(this).remove();\n        });    \n    }\n}"]}